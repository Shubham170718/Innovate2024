// Generated by view binder compiler. Do not edit!
package com.defianttech.convertme.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ListView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.defianttech.convertme.NumberPadView;
import com.defianttech.convertme.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ConvertmeBinding implements ViewBinding {
  @NonNull
  private final FrameLayout rootView;

  /**
   * This binding is not available in all configurations.
   * <p>
   * Present:
   * <ul>
   *   <li>layout/</li>
   * </ul>
   *
   * Absent:
   * <ul>
   *   <li>layout-land/</li>
   * </ul>
   */
  @Nullable
  public final FloatingActionButton fabCustomUnits;

  @NonNull
  public final FloatingActionButton fabEdit;

  @NonNull
  public final MaterialToolbar mainToolbar;

  @NonNull
  public final NumberPadView numberPad;

  @NonNull
  public final ToolbarCategoryButtonBinding toolbarContents;

  @NonNull
  public final ListView unitsList;

  private ConvertmeBinding(@NonNull FrameLayout rootView,
      @Nullable FloatingActionButton fabCustomUnits, @NonNull FloatingActionButton fabEdit,
      @NonNull MaterialToolbar mainToolbar, @NonNull NumberPadView numberPad,
      @NonNull ToolbarCategoryButtonBinding toolbarContents, @NonNull ListView unitsList) {
    this.rootView = rootView;
    this.fabCustomUnits = fabCustomUnits;
    this.fabEdit = fabEdit;
    this.mainToolbar = mainToolbar;
    this.numberPad = numberPad;
    this.toolbarContents = toolbarContents;
    this.unitsList = unitsList;
  }

  @Override
  @NonNull
  public FrameLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ConvertmeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ConvertmeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.convertme, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ConvertmeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fabCustomUnits;
      FloatingActionButton fabCustomUnits = ViewBindings.findChildViewById(rootView, id);

      id = R.id.fabEdit;
      FloatingActionButton fabEdit = ViewBindings.findChildViewById(rootView, id);
      if (fabEdit == null) {
        break missingId;
      }

      id = R.id.main_toolbar;
      MaterialToolbar mainToolbar = ViewBindings.findChildViewById(rootView, id);
      if (mainToolbar == null) {
        break missingId;
      }

      id = R.id.numberPad;
      NumberPadView numberPad = ViewBindings.findChildViewById(rootView, id);
      if (numberPad == null) {
        break missingId;
      }

      id = R.id.toolbarContents;
      View toolbarContents = ViewBindings.findChildViewById(rootView, id);
      if (toolbarContents == null) {
        break missingId;
      }
      ToolbarCategoryButtonBinding binding_toolbarContents = ToolbarCategoryButtonBinding.bind(toolbarContents);

      id = R.id.unitsList;
      ListView unitsList = ViewBindings.findChildViewById(rootView, id);
      if (unitsList == null) {
        break missingId;
      }

      return new ConvertmeBinding((FrameLayout) rootView, fabCustomUnits, fabEdit, mainToolbar,
          numberPad, binding_toolbarContents, unitsList);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
